package com.model.entities;
//Generated 30 ene. 2020 8:50:01 by Hibernate Tools 5.2.12.Final

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import javafx.beans.property.DoubleProperty;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.ListProperty;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleListProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

/**
* Invoice generated by hbm2java
*/
@Entity
@Table(name = "invoice", catalog = "7057507_administration_db")
public class Invoice implements java.io.Serializable {

	private Integer id;
	private Company company;
	private Customer customer;
	private PayMethod payMethod;
	private Tax tax;
	private String invoiceNumber;
	private Date invoiceDate;
	private Integer status;
	private Integer conceptId;
	private Double price;
	private Double taxTotal;
	private Double priceTaxesIncluded;
	private List<ConceptInvoice> conceptInvoices = new ArrayList<ConceptInvoice>(0);
	private List<InvoiceDetail> invoiceDetails = new ArrayList<InvoiceDetail>(0);
	
	
	//Properties
	private IntegerProperty id_prop = new SimpleIntegerProperty();
	private ObjectProperty<Company> company_prop = new SimpleObjectProperty<>();
	private ObjectProperty<Customer> customer_prop = new SimpleObjectProperty<>();
	private ObjectProperty<PayMethod> payMethod_prop = new SimpleObjectProperty<>();
	private ObjectProperty<Tax> tax_prop = new SimpleObjectProperty<>();
	private StringProperty invoiceNumber_prop = new SimpleStringProperty();
	private ObjectProperty<LocalDate> invoiceDate_prop = new SimpleObjectProperty<>();
	private IntegerProperty status_prop = new SimpleIntegerProperty();
	private IntegerProperty conceptId_prop = new SimpleIntegerProperty();
	private DoubleProperty price_prop = new SimpleDoubleProperty();
	private DoubleProperty taxTotal_prop = new SimpleDoubleProperty();
	private DoubleProperty priceTaxesIncluded_prop = new SimpleDoubleProperty();
	private ListProperty<ConceptInvoice> conceptInvoices_prop = new SimpleListProperty<>();
	private ListProperty<InvoiceDetail> invoiceDetails_prop = new SimpleListProperty<>();

	public Invoice() {
	}

		
	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		try {
			
			this.id = id;
			this.id_prop.set(id);
			
		} catch (Exception e) {
			
		}
		
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "company_id")
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		try {
			this.company = company;
			this.company_prop.set(company);
		} catch (Exception e) {		
		}
	
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "customer_id")
	public Customer getCustomer() {
		return this.customer;
	}

	public void setCustomer(Customer customer) {
		try {
			this.customer = customer;
			this.customer_prop.set(customer);
		} catch (Exception e) {
			// TODO: handle exception
		}
		
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "pay_method_id")
	public PayMethod getPayMethod() {
		return this.payMethod;
	}


	
	public void setPayMethod(PayMethod payMethod) {
		try {
			this.payMethod = payMethod;
			this.payMethod_prop.set(payMethod);
		} catch (Exception e) {
			// TODO: handle exception
		}
		
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "tax_id")
	public Tax getTax() {
		return this.tax;
	}

	public void setTax(Tax tax) {
		try {
			this.tax = tax;
			this.tax_prop.set(tax);
		} catch (Exception e) {
			// TODO: handle exception
		}
		
	}

	@Column(name = "invoice_number")
	public String getInvoiceNumber() {
		return this.invoiceNumber;
	}

	public void setInvoiceNumber(String invoiceNumber) {
		try {
			this.invoiceNumber = invoiceNumber;
			this.invoiceNumber_prop.set(invoiceNumber);			
		} catch (Exception e) {
			// TODO: handle exception
		}
		
	}

	
	
	@Temporal(TemporalType.DATE)
	@Column(name = "invoice_date", length = 10)
	public Date getInvoiceDate() {
		return this.invoiceDate;
	}

	public void setInvoiceDate(Date invoiceDate) {
		try {
			this.invoiceDate = invoiceDate;
			this.invoiceDate_prop.set(localDateToDateConverter(invoiceDate));			
		} catch (Exception e) {
			// TODO: handle exception
		}
		
	}

	@Column(name = "status")
	public Integer getStatus() {
		return this.status;
	}

	public void setStatus(Integer status) {
		try {
			this.status = status;
			this.status_prop.set(status);			
		} catch (Exception e) {
			// TODO: handle exception
		}
		
	}
	
	

	@Column(name = "concept_id")
	public Integer getConceptId() {
		return this.conceptId;
	}

	public void setConceptId(Integer conceptId) {
		try {
			this.conceptId = conceptId;
			this.conceptId_prop.set(conceptId);			
		} catch (Exception e) {
			// TODO: handle exception
		}
		
	}

	@Column(name = "price", precision = 22, scale = 0)
	public Double getPrice() {
		return this.price;
	}

	public void setPrice(Double price) {
		try {
			this.price = price;
			this.price_prop.set(price);
		} catch (Exception e) {
			// TODO: handle exception
		}
		
	}

	@Column(name = "tax_total", precision = 22, scale = 0)
	public Double getTaxTotal() {
		return this.taxTotal;
	}

	public void setTaxTotal(Double taxTotal) {
		try {
			this.taxTotal = taxTotal;
			this.taxTotal_prop.set(taxTotal);
		} catch (Exception e) {
			// TODO: handle exception
		}
		
	}
	
	
	

	@Column(name = "price_taxes_included", precision = 22, scale = 0)
	public Double getPriceTaxesIncluded() {
		return this.priceTaxesIncluded;
	}

	public void setPriceTaxesIncluded(Double priceTaxesIncluded) {
		try {
			this.priceTaxesIncluded = priceTaxesIncluded;
			this.priceTaxesIncluded_prop.set(priceTaxesIncluded);
		} catch (Exception e) {
			// TODO: handle exception
		}
		
	}
	


	@OneToMany(fetch = FetchType.LAZY, mappedBy = "invoice", cascade = CascadeType.ALL)
	public List<ConceptInvoice> getConceptInvoices() {
		return this.conceptInvoices;
	}

	public void setConceptInvoices(List<ConceptInvoice> conceptInvoices) {
		try {
			this.conceptInvoices = conceptInvoices;
			this.conceptInvoices_prop.set(FXCollections.observableArrayList(conceptInvoices));
		} catch (Exception e) {
			// TODO: handle exception
		}
		
	}
	
	

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "invoice", cascade = CascadeType.ALL)
	public List<InvoiceDetail> getInvoiceDetails() {
		return this.invoiceDetails;
	}
		

	public void setInvoiceDetails(List<InvoiceDetail> invoiceDetails) {
		try {
			this.invoiceDetails = invoiceDetails;
			this.invoiceDetails_prop.set(FXCollections.observableArrayList(invoiceDetails));
		} catch (Exception e) {
			// TODO: handle exception
		}
		
	}
	
	
	
	//Converters
	public LocalDate localDateToDateConverter(Date date) {
		LocalDate dateA = new java.sql.Date(date.getTime()).toLocalDate();
		return dateA;
	}
	
	
	public Date dateToLocalDateConverter(LocalDate localDate) {
		Date dateA = java.sql.Date.valueOf(localDate);
		return dateA;
	}

		
	

}