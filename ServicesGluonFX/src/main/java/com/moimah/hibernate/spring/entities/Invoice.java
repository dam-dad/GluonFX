package com.moimah.hibernate.spring.entities;
// Generated 30 ene. 2020 8:50:01 by Hibernate Tools 5.2.12.Final

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.google.gson.annotations.Expose;

import net.bytebuddy.build.ToStringPlugin.Exclude;

/**
 * Invoice generated by hbm2java
 */
@Entity
@Table(name = "invoice", catalog = "7057507_administration_db")
public class Invoice implements java.io.Serializable {
	
	@Expose
	private Integer id;		
	@Expose
	private Company company;	
	@Expose
	private Customer customer;	
	@Expose
	private PayMethod payMethod;	
	@Expose
	private Tax tax;	
	@Expose
	private String invoiceNumber;
	@Expose
	private Date invoiceDate;
	@Expose
	private Integer status;
	@Expose
	private Integer conceptId;
	@Expose
	private Double price;
	@Expose
	private Double taxTotal;
	@Expose
	private Double priceTaxesIncluded;	
	@Expose
	private Set<ConceptInvoice> conceptInvoices = new HashSet<ConceptInvoice>(0);	
	@Expose
	private Set<InvoiceDetail> invoiceDetails = new HashSet<InvoiceDetail>(0);

	public Invoice() {
	}

	public Invoice(Company company, Customer customer, PayMethod payMethod, Tax tax, String invoiceNumber,
			Date invoiceDate, Integer status, Integer conceptId, Double price, Double taxTotal,
			Double priceTaxesIncluded, Set<ConceptInvoice> conceptInvoices, Set<InvoiceDetail> invoiceDetails) {
		this.company = company;
		this.customer = customer;
		this.payMethod = payMethod;
		this.tax = tax;
		this.invoiceNumber = invoiceNumber;
		this.invoiceDate = invoiceDate;
		this.status = status;
		this.conceptId = conceptId;
		this.price = price;
		this.taxTotal = taxTotal;
		this.priceTaxesIncluded = priceTaxesIncluded;
		this.conceptInvoices = conceptInvoices;
		this.invoiceDetails = invoiceDetails;
	}

	public Invoice(int company_id, int customer_id, String invoice_date, int concept_id, int pay_method_id,
			int tax_id, int status) {
		
	
			Company c = new Company();
			c.setId(company_id);
			this.company = c;
			Customer c1 = new Customer();
			c1.setId(customer_id);				
			this.customer = c1;

			Date date;
			try {
				date = new SimpleDateFormat("dd-MM-yyyy").parse(invoice_date);
				this.invoiceDate=date;
			} catch (ParseException e) {
				e.printStackTrace();
			}  
			

			ConceptInvoice c2 = new ConceptInvoice();
			c2.setId(concept_id);
			Set<ConceptInvoice> Set = new HashSet<ConceptInvoice>();
			Set.add(c2);
			this.conceptInvoices=Set;

			PayMethod p = new PayMethod();
			p.setId(pay_method_id);				
			this.payMethod=p;

			Tax t = new Tax(); 
			t.setId(tax_id);
			this.tax=t;
			this.price=0.0;
			this.taxTotal=0.0;
			this.priceTaxesIncluded=0.0;
			this.status = status;

	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "company_id")
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "customer_id")
	public Customer getCustomer() {
		return this.customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "pay_method_id")
	public PayMethod getPayMethod() {
		return this.payMethod;
	}

	public void setPayMethod(PayMethod payMethod) {
		this.payMethod = payMethod;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "tax_id")
	public Tax getTax() {
		return this.tax;
	}

	public void setTax(Tax tax) {
		this.tax = tax;
	}

	@Column(name = "invoice_number")
	public String getInvoiceNumber() {
		return this.invoiceNumber;
	}

	public void setInvoiceNumber(String invoiceNumber) {
		this.invoiceNumber = invoiceNumber;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "invoice_date", length = 10)
	public Date getInvoiceDate() {
		return this.invoiceDate;
	}

	public void setInvoiceDate(Date invoiceDate) {
		this.invoiceDate = invoiceDate;
	}

	@Column(name = "status")
	public Integer getStatus() {
		return this.status;
	}

	public void setStatus(Integer status) {
		this.status = status;
	}

	@Column(name = "concept_id")
	public Integer getConceptId() {
		return this.conceptId;
	}

	public void setConceptId(Integer conceptId) {
		this.conceptId = conceptId;
	}

	@Column(name = "price",columnDefinition="double(16,2) default 0")
	public Double getPrice() {
		return this.price;
	}

	public void setPrice(Double price) {
		this.price = price;
	}

	@Column(name = "tax_total",columnDefinition="double(16,2) default 0")
	public Double getTaxTotal() {
		return this.taxTotal;
	}

	public void setTaxTotal(Double taxTotal) {
		this.taxTotal = taxTotal;
	}

	@Column(name = "price_taxes_included",columnDefinition="double(16,2) default 0")
	public Double getPriceTaxesIncluded() {
		return this.priceTaxesIncluded;
	}

	public void setPriceTaxesIncluded(Double priceTaxesIncluded) {
		this.priceTaxesIncluded = priceTaxesIncluded;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "invoice")
	public Set<ConceptInvoice> getConceptInvoices() {
		return this.conceptInvoices;
	}

	public void setConceptInvoices(Set<ConceptInvoice> conceptInvoices) {
		this.conceptInvoices = conceptInvoices;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "invoice")
	public Set<InvoiceDetail> getInvoiceDetails() {
		return this.invoiceDetails;
	}

	public void setInvoiceDetails(Set<InvoiceDetail> invoiceDetails) {
		this.invoiceDetails = invoiceDetails;
	}

}
